package practice.bookyard.client;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JFrame;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import practice.bookyard.contracts.Constants;
import practice.bookyard.contracts.beans.Book;
import practice.bookyard.contracts.beans.User;

public class BookRecommendationsFrame extends JFrame {

	private static final long serialVersionUID = 1L;
	private String accessToken = null;
	private User user = null;
	
	public BookRecommendationsFrame(String accessToken) { 
		
		User user = this.getUserFromAccessToken(accessToken);
		
		this.setAccessToken(accessToken);
		this.setUser(user);
		
		this.setTitle(String.format("Loading %s's book recommendations...", user.getFullName()));
		
		List<Book> books = this.getBookRecommendations(accessToken);
		
		this.setTitle(String.format("%s's (%s) book recommendations", user.getFullName(), user.getEmail()));
	}

	private List<Book> getBookRecommendations(String accessToken) {
		
		String recommendationsUrl = Constants.getRecommendationsUrl();
		String authorizationHeaderKey = "Authorization";
		String authorizationHeaderValue = String.format("Bearer %s", accessToken);
		Map<String, String> headers = new HashMap<String, String>();
		headers.put(authorizationHeaderKey, authorizationHeaderValue);
		String body = "appId=" + this.getUser().getAppId();
		String responseString = new WebRequest().Post(recommendationsUrl, body, headers);
		
		System.out.println(responseString);
		
		return null;
	}

	private User getUserFromAccessToken(String accessToken) {
		
		try
		{
			String appSecret = "Auth0 is awesome!";
			
			Jws<Claims> jwsClaims = Jwts.parser()
					.setSigningKey(appSecret)
					.parseClaimsJws(accessToken);
			
			Claims body = jwsClaims.getBody();
			
			for(Map.Entry<String, Object> entry : body.entrySet())
			{
				System.out.println(entry.getKey() + ": " + entry.getValue());
			}
			
			// if it is not of type AccessToken, throw
			if (!body.get("sub").toString().contentEquals(Constants.JWT_SUBJECT_ACCESS_TOKEN))
			{
				throw new IllegalArgumentException("Does not represent a valid access token.", null);
			}
			
			// if it is not of type AccessToken, throw
			if (!body.get("iss").toString().contentEquals("Bookyard Server"))
			{
				throw new IllegalArgumentException("Invalid token source.", null);
			}
			
			User user = new User();
			user.setId((int)body.get("userId"));
			user.setUserName(body.get("userName").toString());
			user.setFullName(body.get("fullName").toString());
			user.setEmail(body.get("email").toString());
			user.setAppId(body.get("appId").toString());
			user.setApplicationTableId((int)body.get("applicationTableId"));
			
			return user;
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			return null;
		}
	}

	public String getAccessToken() {
		return accessToken;
	}

	protected void setAccessToken(String accessToken) {
		this.accessToken = accessToken;
	}

	public User getUser() {
		return user;
	}

	protected void setUser(User user) {
		this.user = user;
	}
}
